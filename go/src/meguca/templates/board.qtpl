{% import "strconv" %}
{% import "fmt" %}
{% import "meguca/config" %}
{% import "meguca/common" %}
{% import "meguca/lang" %}
{% import "meguca/auth" %}
{% import "meguca/imager/assets" %}
{% import banners "meguca/assets" %}

{% func renderThreadForm(id string, conf config.BoardConfContainer, pos auth.ModerationLevel) %}{% stripspace %}
	{% code ln := lang.Get() %}
	<form id="new-thread-form" action="/api/create-thread" method="POST" enctype="multipart/form-data">
		{% if id == "all" %}
			<select name="board" required>
				{% for _, b := range config.GetBoardTitles() %}
					<option value="{%s b.ID %}">
						{%= formatTitle(b.ID, b.Title) %}
					</option>
				{% endfor %}
			</select>
			<br>
		{% else %}
			<input type="text" name="board" value="{%s conf.ID %}" hidden>
		{% endif %}
		<input name="subject" placeholder="{%s ln.UI["subject"] %}" required type="text" maxlength="100">
		<br>
		{%= noscriptPostCreationFields(pos) %}
		{%= uploadForm() %}
		{%= captcha() %}
		{%= submit(false) %}
	</form>
{% endstripspace %}{% endfunc %}

{% func renderBanner(conf config.BoardConfContainer) %}{% stripspace %}
	{% code bannerID, mime, ok := banners.Banners.Random(conf.ID) %}
	{% if ok %}
		<h1 class="image-banner">
			{% code url := fmt.Sprintf("/banners/%s/%d", conf.ID, bannerID) %}
			{% if mime == "video/webm" %}
				<video src="{%s url %}" autoplay loop>
			{% else %}
				<img src="{%s url %}">
			{% endif %}
		</h1>
	{% endif %}
{% endstripspace %}{% endfunc %}

{% func renderBoardSearch(catalog bool) %}{% stripspace %}
	{% code ln := lang.Get() %}
	<div class="board-search">
		<input class="board-search-input" type="text" placeholder="{%s ln.UI["search"] %}">
		{% if catalog %}
			<select name="sortMode">
				{% for i, s := range [...]string{"bump", "lastReply", "creation", "replyCount", "fileCount"} %}
					<option value="{%s s %}">
						{%s ln.SortModes[i] %}
					</option>
				{% endfor %}
			</select>
		{% endif %}
	</div>
{% endstripspace %}{% endfunc %}

{% func renderBoard(threadHTML []byte, id, title string, conf config.BoardConfContainer, page, total int, pos auth.ModerationLevel, catalog bool) %}{% stripspace %}
	{% code ln := lang.Get() %}
	{%= renderBanner(conf) %}
	<h1 class="page-title">{%s title %}</h1>
	<nav class="board-nav board-nav_top">
		<aside id="thread-form-container">{%= renderThreadForm(id, conf, pos) %}</aside>
		<a class="button board-nav-item board-nav-new-thread new-thread-button">
			{%s ln.UI["newThread"] %}
		</a>
		<a class="button board-nav-item board-nav-refresh">
			{%s ln.Common.UI["refresh"] %}
		</a>
		{%= catalogLink(catalog) %}
		{% if !catalog %}
			{%= pagination(page, total) %}
		{% endif %}
		{%= renderBoardSearch(catalog) %}
	</nav>
	<hr class="separator">
	{%z= threadHTML %}
	<script id="board-configs" type="application/json">
		{%z= conf.JSON %}
	</script>
	<hr class="separator">
	<nav class="board-nav board-nav_bottom">
		{%= catalogLink(catalog) %}
		{% if !catalog %}
			{%= pagination(page, total) %}
		{% endif %}
	</nav>
{% endstripspace %}{% endfunc %}

CatalogThreads renders thread content for a catalog page. Separate function to
allow caching of generated posts.
{% func CatalogThreads(b []common.Thread, json []byte) %}{% stripspace %}
	<div id="catalog">
		{% for _, t := range b %}
			{% code idStr:= strconv.FormatUint(t.ID, 10) %}
			<article id="post{%s idStr %}">
				{%= deletedToggle() %}
				{% if t.Image != nil %}
					<figure>
						{% code img := *t.Image %}
						<a href="/{%s t.Board %}/{%s idStr %}">
							<img width="{%d int(img.Dims[2]) %}" height="{%d int(img.Dims[3]) %}" class="catalog" src="{%s assets.ThumbPath(img.ThumbType, img.SHA1) %}">
						</a>
					</figure>
				{% endif %}
				<span class="spaced thread-links hide-empty">
					<b class="board">
						/{%s t.Board %}/
					</b>
					<span class="counters">
						{%d int(t.PostCtr) %}/{%d int(t.ImageCtr) %}
					</span>
					{% if t.Image == nil %}
						{%= expandLink(t.Board, idStr) %}
					{% endif %}
					{%= last100Link(t.Board, idStr) %}
				</span>
				<br>
				<h3>
					「{%s t.Subject %}」
				</h3>
				<blockquote>
					{%s t.Body %}
				</blockquote>
			</article>
		{% endfor %}
		<script id="post-data" type="application/json">
			{%z= json %}
		</script>
	</div>
{% endstripspace %}{% endfunc %}

IndexThreads renders abbreviated threads for display on board index pages
{% func IndexThreads(threads []common.Thread, json []byte) %}{% stripspace %}
	{% code bls :=extractBacklinks(15*6, threads...) %}
	<div id="index-thread-container">
		{% for _, t := range threads %}
			{% code idStr := strconv.FormatUint(t.ID, 10) %}
			<section class="index-thread{% if t.Deleted %}{% space %}deleted{% endif %}" data-id="{%s idStr %}">
				{%= deletedToggle() %}
				{%= renderThreadPosts(t, bls, true) %}
				<hr class="separator">
			</section>
		{% endfor %}
		<script id="post-data" type="application/json">
			{%z= json %}
		</script>
		{%= encodeBacklinks(bls) %}
	</div>
{% endstripspace %}{% endfunc %}

Render noscript-specific post creation fields
{% func noscriptPostCreationFields(pos auth.ModerationLevel) %}{% stripspace %}
	{% code ln := lang.Get() %}
	{% if pos > auth.NotStaff %}
		{%= input(staffTitleSpec.wrap(), ln) %}
	{% endif %}
	{% for _, s := range specs["noscriptPostCreation"] %}
		{%= input(s, ln) %}
	{% endfor %}
{% endstripspace %}{% endfunc %}

Render image upload form
{% func uploadForm() %}{% stripspace %}
	<span class="upload-container">
		<strong class="upload-status"></strong>
		<br>
		<input type="file" name="image" accept="image/png, image/gif, image/jpeg, video/webm, video/ogg, audio/ogg, application/ogg, video/mp4, audio/mp4, audio/mp3, application/zip, application/x-7z-compressed, application/x-xz, application/x-gzip">
		<br>
	</span>
{% endstripspace %}{% endfunc %}

Link to catalog or board page
{% func catalogLink(catalog bool) %}{% stripspace %}
	{% code ln := lang.Get().UI %}
	{% if catalog %}
		<a class="button board-nav-item board-nav-back" href=".">
			{%s ln["return"] %}
		</a>
	{% else %}
		<a class="button board-nav-item board-nav-catalog" href="catalog">
			{%s ln["catalog"] %}
		</a>
	{% endif %}
{% endstripspace %}{% endfunc %}

Links to different pages og the board index
{% func pagination(page, total int) %}{% stripspace %}
	<div class="board-pagination">
		{% if page != 0 %}
			{% if page-1 != 0 %}
				{%= pageLink(0, "<<") %}
			{% endif %}
			{%= pageLink(page-1, "<") %}
		{% endif %}
		{% for i := 0; i < total; i++ %}
			{% if i != page %}
				{%= pageLink(i, strconv.Itoa(i)) %}
			{% else %}
				<b>
					{%d i %}
				</b>
			{% endif %}
		{% endfor %}
		{% if page != total-1 %}
			{%= pageLink(page+1, ">") %}
			{% if page+1 != total-1 %}
				{%= pageLink(total-1, ">>") %}
			{% endif %}
		{% endif %}
	</div>
{% endstripspace %}{% endfunc %}

Link to a different paginated board page
{% func pageLink(i int, text string) %}{% stripspace %}
	<a href="?page={%d i %}">
		{%s text %}
	</a>
{% endstripspace %}{% endfunc %}
