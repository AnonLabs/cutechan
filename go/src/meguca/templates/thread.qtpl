{% import "strconv" %}
{% import "meguca/lang" %}
{% import "meguca/common" %}
{% import "meguca/config" %}
{% import "meguca/auth" %}
{% import "encoding/json" %}

{% func renderThread(postHTML []byte, id uint64, board string, abbrev bool, pos auth.ModerationLevel) %}{% stripspace %}
	{% code conf := config.GetBoardConfigs(board) %}
	{% code ln := lang.Get() %}
	<form id="new-reply-form" action="/api/create-reply" method="post" enctype="multipart/form-data" class="top-margin hidden">
		<input name="board" type="text" value="{%s board %}" hidden>
		<input name="op" type="text" value="{%s strconv.FormatUint(id, 10) %}" hidden>
		{%= noscriptPostCreationFields(pos) %}
		{%= uploadForm() %}
		{%= captcha() %}
		{%= submit(true) %}
	</form>
	<span class="aside-container top-margin">
		<span class="act">
			<a href=".">
				{%s ln.UI["return"] %}
			</a>
		</span>
		<span class="act">
			<a href="catalog">
				{%s ln.UI["catalog"] %}
			</a>
		</span>
		<span id="expand-images" class="act">
			<a>
				{%s ln.Common.Posts["expandImages"] %}
			</a>
		</span>
		{%= hoverReveal("span", conf.Notice, ln.UI["showNotice"]) %}
		{%= hoverReveal("span", conf.Rules, ln.UI["rules"]) %}
	</span>
	<hr>
	{%z= postHTML %}
	<div id="bottom-spacer"></div>
	<hr>
	<span class="aside-container">
		<span class="act" id="bottom">
			<a href=".">
				{%s ln.UI["return"] %}
			</a>
		</span>
		<span class="act">
			<a href="catalog">
				{%s ln.UI["catalog"] %}
			</a>
		</span>
		<span class="act posting glass">
			<a>{%s ln.UI["reply"] %}</a>
		</span>
	</span>
{% endstripspace %}{% endfunc %}

ThreadPosts renders the post content of a thread. Separate function to allow
caching of generated posts.
{% func ThreadPosts(t common.Thread, json []byte) %}{% stripspace %}
	<section id="thread-container" data-id="{%s strconv.FormatUint(t.ID, 10) %}">
		{% code bls := extractBacklinks(1<<10, t) %}
		{%= renderThreadPosts(t, bls, config.Get().RootURL, false) %}
		<script id="post-data" type="application/json">
			{%z= json %}
		</script>
		{%= encodeBacklinks(bls) %}
	</section>
	<script id="board-configs" type="application/json">
		{%z= config.GetBoardConfigs(t.Board).JSON %}
	</script>
{% endstripspace %}{% endfunc %}

Common functionality between index board pages and threads pages
{% func renderThreadPosts(t common.Thread, bls backlinks, root string, index bool) %}{% stripspace %}
	{% code c := articleContext{
		index: index,
		sticky: t.Sticky,
		op: t.ID,
		board: t.Board,
		subject: t.Subject,
		root: root,
		backlinks: bls,
	} %}
	{% code c.omit, c.imageOmit = CalculateOmit(t) %}
	{%= renderArticle(t.Post, c) %}

	{% code c.sticky = false %}
	{% code c.omit, c.imageOmit = 0, 0 %}
	{% code c.subject = "" %}
	{% for _, p := range t.Posts %}
		{%= renderArticle(p, c) %}
	{% endfor %}
{% endstripspace %}{% endfunc %}

{% func encodeBacklinks(bls backlinks) %}{% stripspace %}
	<script id="backlink-data" type="application/json">
		{% code buf, _ := json.Marshal(bls) %}
		{%z= buf %}
	</script>
{% endstripspace %}{% endfunc %}
